        <div id="username-div">
            <input type="text" id="username">
            <button class="username-btn" onclick="changeUsername()">Change username</button>

        </div>
    </div>

    <div class="controller">
        <button class="control-btn disable-btn" onclick="toggleMicrophone(this)">Open microphone</button>
        <button class="control-btn disable-btn" onclick="toggleMute(this)">Mute</button>
        <button class="control-btn disable-btn" onclick="toggleConnection(this)">Go online</button>
    </div>

</header>
<h2>users list</h2>
<ul class="users" id="users">


</ul>

<script src="/files/js/index.js"></script>
<link rel="stylesheet" href="/files/css/index.css">
Add some style to our interface with create index.css in /public/css/ folder.
html , body {
    width: 100%;
    height: 100%;
    overflow: hidden;
}
.controller{
    margin: 0;
    padding: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;

}
body{
    display: flex;
    text-align: center;
    flex-flow: column;
    margin: 0;
    padding: 0;
    background-color: rgb(12 11 25);
    color: #fff;
}
header{
    margin:0;
    padding: 20px 0;
    width: 100%;
    height: fit-content;
    background-color: rgb(15, 15, 44);
    color: #fff;

}
.control-btn{
    width: 120px;
    padding: 10px 0;
    border: none;
    border-radius: 8px;
    cursor: pointer;
}
.enable-btn{
    background-color: rgb(26, 184, 26);
    color: #fff;
    border-bottom: 5px solid rgb(18, 131, 18);
    margin: 10px ;
}

.enable-btn:hover{
    border-bottom: none;
    margin-top: 15px;
}
.disable-btn{
    margin: 10px ;
    background-color: rgb(172, 25, 25);
    color: #fff;
    border-bottom: 5px solid rgb(184, 57, 57);
}
.disable-btn:hover{
    border-bottom: none;
    margin-top: 15px;
}
.username-btn{
    width: 200px;
    margin: 10px auto;
    padding: 10px 0;
}
input{
    width: 200px;
    padding: 10px;
    margin: 10px auto;
}

#username-div{
    display: none;
}
#username-label{
    width: 200px;
    height: fit-content;
    margin: 0 auto;
    padding: 10px 20px;
    background-color: rgb(12 11 25);
    border-radius: 8px;
    border: 2px solid rgb(26, 26, 77);
    cursor: pointer;
}
ul.users{
    width: 100%;
    margin: 0;
    padding: 0;
}
ul.users li{
    width: 90%;
    margin: 10px auto;
    padding: 10px 0;
    text-align: center;
    background-color: rgb(15 15 44);
    list-style: none;
    color: #fff;
    border-radius: 8px;
}

Alt Text

In the last part of this project, we use socket to make our app in realtime.Now put socket codes into index.js above the http.listen(...):

io.on("connection", function (socket) {
  const socketId = socket.id;
  socketsStatus[socket.id] = {};


  console.log("connect");

  socket.on("voice", function (data) {

    var newData = data.split(";");
    newData[0] = "data:audio/ogg;";
    newData = newData[0] + newData[1];

    for (const id in socketsStatus) {

      if (id != socketId && !socketsStatus[id].mute && socketsStatus[id].online)
        socket.broadcast.to(id).emit("send", newData);
    }

  });

  socket.on("userInformation", function (data) {
    socketsStatus[socketId] = data;

    io.sockets.emit("usersUpdate",socketsStatus);
  });


  socket.on("disconnect", function () {
    delete socketsStatus[socketId];
  });

});
After that create a front-end javascript file in /public/js/index.js and put codes below into it:
const userStatus = {
  microphone: false,
  mute: false,
  username: "user#" + Math.floor(Math.random() * 999999),
  online: false,
};

const usernameInput = document.getElementById("username");
const usernameLabel = document.getElementById("username-label");
const usernameDiv = document.getElementById("username-div");
const usersDiv = document.getElementById("users");

usernameInput.value = userStatus.username;
usernameLabel.innerText = userStatus.username;


window.onload = (e) => {
  mainFunction(1000);
};

var socket = io("ws://localhost:3000");
socket.emit("userInformation", userStatus);


function mainFunction(time) {


  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
    var madiaRecorder = new MediaRecorder(stream);
    madiaRecorder.start();

    var audioChunks = [];

    madiaRecorder.addEventListener("dataavailable", function (event) {
      audioChunks.push(event.data);
    });

    madiaRecorder.addEventListener("stop", function () {
      var audioBlob = new Blob(audioChunks);

      audioChunks = [];

      var fileReader = new FileReader();
      fileReader.readAsDataURL(audioBlob);
      fileReader.onloadend = function () {
        if (!userStatus.microphone || !userStatus.online) return;

        var base64String = fileReader.result;
        socket.emit("voice", base64String);

      };

      madiaRecorder.start();


      setTimeout(function () {
        madiaRecorder.stop();
      }, time);
    });

    setTimeout(function () {
      madiaRecorder.stop();
    }, time);
  });


  socket.on("send", function (data) {
    var audio = new Audio(data);
    audio.play();
  });

  socket.on("usersUpdate", function (data) {
    usersDiv.innerHTML = '';
    for (const key in data) {
      if (!Object.hasOwnProperty.call(data, key)) continue;

      const element = data[key];
      const li = document.createElement("li");
      li.innerText = element.username;
      usersDiv.append(li);

    }
  });

}

usernameLabel.onclick = function () {
  usernameDiv.style.display = "block";
  usernameLabel.style.display = "none";
}

function changeUsername() {
  userStatus.username = usernameInput.value;
  usernameLabel.innerText = userStatus.username;
  usernameDiv.style.display = "none";
  usernameLabel.style.display = "block";
  emitUserInformation();
}

function toggleConnection(e) {
  userStatus.online = !userStatus.online;

  editButtonClass(e, userStatus.online);
  emitUserInformation();
}

function toggleMute(e) {
  userStatus.mute = !userStatus.mute;

  editButtonClass(e, userStatus.mute);
  emitUserInformation();
}

function toggleMicrophone(e) {
  userStatus.microphone = !userStatus.microphone;
  editButtonClass(e, userStatus.microphone);
  emitUserInformation();
}


function editButtonClass(target, bool) {
  const classList = target.classList;
  classList.remove("enable-btn");
  classList.remove("disable-btn");

  if (bool)
    return classList.add("enable-btn");

  classList.add("disable-btn");
}

function emitUserInformation() {
  socket.emit("userInformation", userStatus);
}


run command:
node index.js
Congratulation! Now you have a realtime voice chat app created with nodejs and socketIo.I hope useful this article to you and thank you to read it.

ðŸ‘‹ Before you go

Please leave your appreciation by commenting on this post!

Join to comment

Top comments (13)
Subscribe
pic
Add to the discussion
 
 
judgegodwins profile image
Judgegodwins
â€¢
Aug 3 '21

Is there a GitHub repo for this?


4
Like
 
 
hosseinmobarakian profile image
Hossein Mobarakian
â€¢
Aug 3 '21

No


1
Like
 
 
airplanegobrr profile image
AirplaneGoBrr
â€¢
Jan 13 '23 â€¢ Edited

OK I would like to add a few suggestions

use newData.join("") for the server or you could just do "data:audio/ogg;"+data and that would work as well
Check if navigator AND navigator.mediaDevices exists ( Just a simple if check )
Post the code on Github
Tell the client what other clients status are EX if someone is muted or their mic is off
But thank you very much for all the code! It's very helpful! However the 1 second delay is kindaa... ehh but I tried to change it to <1000ms and it didn't seam to work without cutting out sadly


1
Like
 
 
akash4919 profile image
Akash4919
â€¢
Apr 18 '22

Friend I am developing a backend server of a game where players can communicate with each other with real time audio and chat message can you help me a little with it......Thankyou and your this code helped me alot


Like
 
 
itsfuad profile image
Fuad Hasan
â€¢
Apr 29 '22

Would be nice if there was a running demo app.


2
Like
 
 
lylest profile image
wackyizzy
â€¢
Jul 28 '21

looking forward to try this


1
Like
 
 
itsfuad profile image
Fuad Hasan
â€¢
Apr 29 '22

Someone upload the structured code to github. I've become too lazy to structure this codeðŸ™ƒ


1
Like
 
 
buglessir profile image
Mohammad
â€¢
Dec 1 '22

If you upload your codes on somewhere like GitHub, it will help others to use it more easily


1
Like
 
 
perrut profile image
Matheus Perrut
â€¢
Sep 8 '21

Thank you for that!!!


1
Like
 
 
cpninjaru profile image
cpninjaru
â€¢
Nov 18 '22

really working! Thx


1
Like
 
 
disalprabhath profile image
Disal Prabhath
â€¢
Mar 30 '22

i need more help to build this software


1
Like
 
 
robbelroot profile image
Robert S.
â€¢
Mar 19 '22

Hmm i'm getting a data.split error, that i cant read split of null, so data seems to be null.


2
Like
 
 
itsfuad profile image
Fuad Hasan
â€¢
Apr 29 '22

use default values like
data ||= [];

1
Like
Code of Conduct â€¢ Report abuse
profile
Axiom
Promoted

Image of Axiom

Because 640k of logs isnâ€™t enough for everyone
Data gymnastics arenâ€™t in the olympics. What if you just kept it all?

Stop Sampling. Get Axiom.

Read next
dharamgfx profile image
Mastering Email Sending in Node.js: A Step-by-Step Guide
Dharmendra Kumar - Aug 27

luan_carlosmacedodealm profile image
You don't need React.memo
Luan Carlos Macedo de Almeida - Aug 26

sammaji profile image
Build and deploy a chat application using Socket.io and Redis.
Samyabrata Maji - Aug 26

abhishekgurjar profile image
Build a Loan Calculator Website
Abhishek Gurjar - Aug 26


Hossein Mobarakian
Follow
Programming Is Fun
Location
iran/khoramabad
Work
Flyksoft Company
Joined
May 22, 2021
More from Hossein Mobarakian
Full Backup in Nodejs(Files and Database backup)
#javascript #webdev #tutorial #node
What is a Factory Design Pattern? It Is For You!
#designpatterns #webdev #javascript #productivity
Create a custom cursor for your website
#javascript #dom #html #css
profile
Auth0
Promoted

Auth0 image

Calling all devs: Explore all that is possible to build and secure in 24 hours.
Join us September 24 to explore all that is possible to build and secure with Auth0 by Okta.

Register now

html , body {
    width: 100%;
    height: 100%;
    overflow: hidden;
}
.controller{
    margin: 0;
    padding: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;

}
body{
    display: flex;
    text-align: center;
    flex-flow: column;
    margin: 0;
    padding: 0;
    background-color: rgb(12 11 25);
    color: #fff;
}
header{
    margin:0;
    padding: 20px 0;
    width: 100%;
    height: fit-content;
    background-color: rgb(15, 15, 44);
    color: #fff;

}
.control-btn{
    width: 120px;
    padding: 10px 0;
    border: none;
    border-radius: 8px;
    cursor: pointer;
}
.enable-btn{
    background-color: rgb(26, 184, 26);
    color: #fff;
    border-bottom: 5px solid rgb(18, 131, 18);
    margin: 10px ;
}

.enable-btn:hover{
    border-bottom: none;
    margin-top: 15px;
}
.disable-btn{
    margin: 10px ;
    background-color: rgb(172, 25, 25);
    color: #fff;
    border-bottom: 5px solid rgb(184, 57, 57);
}
.disable-btn:hover{
    border-bottom: none;
    margin-top: 15px;
}
.username-btn{
    width: 200px;
    margin: 10px auto;
    padding: 10px 0;
}
input{
    width: 200px;
    padding: 10px;
    margin: 10px auto;
}

#username-div{
    display: none;
}
#username-label{
    width: 200px;
    height: fit-content;
    margin: 0 auto;
    padding: 10px 20px;
    background-color: rgb(12 11 25);
    border-radius: 8px;
    border: 2px solid rgb(26, 26, 77);
    cursor: pointer;
}
ul.users{
    width: 100%;
    margin: 0;
    padding: 0;
}
ul.users li{
    width: 90%;
    margin: 10px auto;
    padding: 10px 0;
    text-align: center;
    background-color: rgb(15 15 44);
    list-style: none;
    color: #fff;
    border-radius: 8px;
}
